#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <time.h>
#include <unistd.h>

#define WINDOW_X 0
#define WINDOW_Y 0
#define WINDOW_WIDTH 1920
#define WINDOW_HEIGHT 1080

#define GRID_SIZE 30
#define GRID_DIM 1000
#define SNAKE_MAX_LENGTH GRID_SIZE * GRID_SIZE

enum {
  SNAKE_UP,
  SNAKE_DOWN,
  SNAKE_LEFT,
  SNAKE_RIGHT
};

typedef struct {
  int x;
  int y;
} Position;

typedef struct Snake {
  int x, y;
  int dir;
  struct Snake* next;
} Snake;

typedef struct {
  Snake* head;
  Snake* tail;
  int length;
  SDL_Scancode up, down, left, right;
  SDL_Color color;
} SnakePlayer;

Position Apple;
SnakePlayer player1, player2;
int p1pts = 0, p2pts = 0;

void trimitere_over(char exe[]) {
  SDL_Quit();
  const char* new_program = exe;
  execlp(new_program, new_program, (char*)NULL);
  perror("Eroare la lansarea noului program");
  exit(EXIT_FAILURE);
}

void init_snake(SnakePlayer* player, int startX, int startY, SDL_Scancode up, SDL_Scancode down, SDL_Scancode left, SDL_Scancode right, SDL_Color color) {
  Snake* new = malloc(sizeof(Snake));
  new->x = startX;
  new->y = startY;
  new->dir = SNAKE_UP;
  new->next = NULL;

  player->head = new;
  player->tail = new;
  player->length = 1;
  player->up = up;
  player->down = down;
  player->left = left;
  player->right = right;
  player->color = color;
}

void increase_snake(SnakePlayer* player) {
  Snake* new = malloc(sizeof(Snake));

  switch (player->tail->dir) {
    case SNAKE_UP:
      new->x = player->tail->x;
      new->y = player->tail->y + 1;
      break;
    case SNAKE_DOWN:
      new->x = player->tail->x;
      new->y = player->tail->y - 1;
      break;
    case SNAKE_LEFT:
      new->x = player->tail->x + 1;
      new->y = player->tail->y;
      break;
    case SNAKE_RIGHT:
      new->x = player->tail->x - 1;
      new->y = player->tail->y;
      break;
  }

  new->dir = player->tail->dir;
  new->next = NULL;
  player->tail->next = new;
  player->tail = new;
  player->length++;
}

void move_snake(SnakePlayer* player) {
  int prev_x = player->head->x;
  int prev_y = player->head->y;
  int prev_dir = player->head->dir;

  switch (player->head->dir) {
    case SNAKE_UP: player->head->y--; break;
    case SNAKE_DOWN: player->head->y++; break;
    case SNAKE_LEFT: player->head->x--; break;
    case SNAKE_RIGHT: player->head->x++; break;
  }

  Snake* current = player->head->next;
  while (current != NULL) {
    int temp_x = current->x;
    int temp_y = current->y;
    int temp_dir = current->dir;

    current->x = prev_x;
    current->y = prev_y;
    current->dir = prev_dir;

    prev_x = temp_x;
    prev_y = temp_y;
    prev_dir = temp_dir;

    current = current->next;
  }
}

void render_snake(SDL_Renderer* renderer, SnakePlayer* player, int offset_x, int offset_y) {
  SDL_SetRenderDrawColor(renderer, player->color.r, player->color.g, player->color.b, 255);

  int seg_size = GRID_DIM / GRID_SIZE;
  SDL_Rect seg = {0, 0, seg_size, seg_size};

  Snake* current = player->head;
  while (current != NULL) {
    seg.x = offset_x + current->x * seg_size;
    seg.y = offset_y + current->y * seg_size;
    SDL_RenderFillRect(renderer, &seg);
    current = current->next;
  }
}

void render_grid(SDL_Renderer* renderer, int x, int y) {
  SDL_SetRenderDrawColor(renderer, 0x55, 0x55, 0xff, 255);
  SDL_Rect outline = {x, y, GRID_DIM, GRID_DIM};
  SDL_RenderDrawRect(renderer, &outline);
}

void gen_apple(SnakePlayer* p1, SnakePlayer* p2) {
  bool valid;
  do {
    valid = true;
    Apple.x = rand() % GRID_SIZE;
    Apple.y = rand() % GRID_SIZE;

    Snake* s;
    for (int i = 0; i < 2; ++i) {
      SnakePlayer* player = (i == 0) ? p1 : p2;
      s = player->head;
      while (s != NULL) {
        if (s->x == Apple.x && s->y == Apple.y) {
          valid = false;
          break;
        }
        s = s->next;
      }
    }
  } while (!valid);
}

void render_apple(SDL_Renderer* renderer, int x, int y) {
  SDL_SetRenderDrawColor(renderer, 0xff, 0x00, 0x00, 255);

  int size = GRID_DIM / GRID_SIZE;
  SDL_Rect apple = {x + Apple.x * size, y + Apple.y * size, size, size};
  SDL_RenderFillRect(renderer, &apple);
}

void detect_apple(SnakePlayer* player, int* points) {
  if (player->head->x == Apple.x && player->head->y == Apple.y) {
    increase_snake(player);
    *points += 10;
    gen_apple(&player1, &player2);
  }
}

bool detect_crash(SnakePlayer* player, SnakePlayer* other) {
  if (player->head->x < 0 || player->head->x >= GRID_SIZE ||
      player->head->y < 0 || player->head->y >= GRID_SIZE) {
    return true;
  }

  Snake* s = player->head->next;
  while (s != NULL) {
    if (s->x == player->head->x && s->y == player->head->y) {
      return true;
    }
    s = s->next;
  }

  s = other->head;
  while (s != NULL) {
    if (s->x == player->head->x && s->y == player->head->y) {
      return true;
    }
    s = s->next;
  }

  return false;
}

void render_text(SDL_Renderer* renderer, TTF_Font* font, const char* text, int x, int y, SDL_Color color) {
  SDL_Surface* surface = TTF_RenderText_Blended(font, text, color);
  SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
  SDL_Rect dst = {x, y, surface->w, surface->h};
  SDL_RenderCopy(renderer, texture, NULL, &dst);
  SDL_FreeSurface(surface);
  SDL_DestroyTexture(texture);
}

int main() {
  srand(time(NULL));
  p1pts = 0;
  p2pts = 0;

  SDL_Init(SDL_INIT_VIDEO);
  TTF_Init();

  SDL_Window* window = SDL_CreateWindow("Dual Snake", WINDOW_X, WINDOW_Y, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_BORDERLESS);
  SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

  TTF_Font* font = TTF_OpenFont("font.ttf", 24);
  if (!font) {
    printf("Failed to load font: %s\n", TTF_GetError());
    exit(1);
  }

  int offset_x = (WINDOW_WIDTH - GRID_DIM) / 2;
  int offset_y = (WINDOW_HEIGHT - GRID_DIM) / 2;

  SDL_Color green = {0x00, 0xff, 0x00, 0xff};
  SDL_Color blue = {0x00, 0xaa, 0xff, 0xff};
  SDL_Color white = {255, 255, 255, 255};

  init_snake(&player1, GRID_SIZE / 4, GRID_SIZE / 2, SDL_SCANCODE_W, SDL_SCANCODE_S, SDL_SCANCODE_A, SDL_SCANCODE_D, green);
  init_snake(&player2, 3 * GRID_SIZE / 4, GRID_SIZE / 2, SDL_SCANCODE_UP, SDL_SCANCODE_DOWN, SDL_SCANCODE_LEFT, SDL_SCANCODE_RIGHT, blue);

  increase_snake(&player1);
  increase_snake(&player2);

  gen_apple(&player1, &player2);

  bool quit = false;
  SDL_Event event;
  while (!quit) {
    while (SDL_PollEvent(&event)) {
      if (event.type == SDL_QUIT || (event.type == SDL_KEYDOWN && event.key.keysym.sym == SDLK_ESCAPE)) {
        quit = true;
      } else if (event.type == SDL_KEYDOWN) {
        SDL_Scancode key = event.key.keysym.scancode;
        if (key == player1.up && player1.head->dir != SNAKE_DOWN) player1.head->dir = SNAKE_UP;
        if (key == player1.down && player1.head->dir != SNAKE_UP) player1.head->dir = SNAKE_DOWN;
        if (key == player1.left && player1.head->dir != SNAKE_RIGHT) player1.head->dir = SNAKE_LEFT;
        if (key == player1.right && player1.head->dir != SNAKE_LEFT) player1.head->dir = SNAKE_RIGHT;

        if (key == player2.up && player2.head->dir != SNAKE_DOWN) player2.head->dir = SNAKE_UP;
        if (key == player2.down && player2.head->dir != SNAKE_UP) player2.head->dir = SNAKE_DOWN;
        if (key == player2.left && player2.head->dir != SNAKE_RIGHT) player2.head->dir = SNAKE_LEFT;
        if (key == player2.right && player2.head->dir != SNAKE_LEFT) player2.head->dir = SNAKE_RIGHT;
      }
    }

    move_snake(&player1);
    move_snake(&player2);

    bool p1dead = detect_crash(&player1, &player2);
    bool p2dead = detect_crash(&player2, &player1);

    if (p1dead)  p1pts -= 50;
    if (p2dead)  p2pts -= 50;
    if(p1dead || p2dead){
      if(p1pts > p2pts){
        trimitere_over("./p1w");
	SDL_Quit();
	exit(0);
      }
      if(p2pts > p1pts){
        trimitere_over("./p2w");
	SDL_Quit();
	exit(0);
      }
      if(p1pts == p2pts){
        trimitere_over("./tie");
	SDL_Quit();
	exit(0);
      }
    }

    detect_apple(&player1, &p1pts);
    detect_apple(&player2, &p2pts);

    SDL_SetRenderDrawColor(renderer, 0x11, 0x11, 0x11, 255);
    SDL_RenderClear(renderer);

    render_grid(renderer, offset_x, offset_y);
    render_apple(renderer, offset_x, offset_y);
    render_snake(renderer, &player1, offset_x, offset_y);
    render_snake(renderer, &player2, offset_x, offset_y);

    char scoreText[64];
    snprintf(scoreText, sizeof(scoreText), "Player 1: %d", p1pts);
    render_text(renderer, font, scoreText, 30, 30, white);
    snprintf(scoreText, sizeof(scoreText), "Player 2: %d", p2pts);
    render_text(renderer, font, scoreText, 30, 70, white);

    SDL_RenderPresent(renderer);
    SDL_Delay(100);
  }

  TTF_CloseFont(font);
  TTF_Quit();
  SDL_DestroyRenderer(renderer);
  SDL_DestroyWindow(window);
  SDL_Quit();

  return 0;
}
